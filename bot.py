# bot_webhook.py ‚Äî –≤–µ—Ä—Å–∏—è –¥–ª—è webhook (Render)
from pathlib import Path
from typing import Set

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

import os
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å .env")

# URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render (–∑–∞–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!)
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-app-name.onrender.com")
PORT = int(os.getenv("PORT", 8080))

# ---- –ö–æ–Ω—Ç–µ–Ω—Ç (–ø—Ä–∞–≤—å –ø–æ–¥ —Å–µ–±—è) ----
PROJECT_NAME = "–°–ü–±: –ñ–µ–Ω—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–ø—Ä–µ—Å—Å–∏–π"
ABOUT_TEXT = (
    "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –∏ –±–µ—Ä–µ–∂–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É. "
    "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º 4 —Ç–æ—á–∫–∏ –ø–∞–º—è—Ç–∏ –æ –∂–µ–Ω—â–∏–Ω–∞—Ö, –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –æ—Ç —Ä–µ–ø—Ä–µ—Å—Å–∏–π. "
    "–ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, —Ñ–∞–∫—Ç –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –ø–æ–º–æ–≥–∞—é—â–∏—Ö —É–≤–∏–¥–µ—Ç—å –≥–æ—Ä–æ–¥ –∏–Ω–∞—á–µ."
)

HELP_TEXT = (
    "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
    "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏.\n"
    "‚Ä¢ ¬´–ù–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é¬ª –ø—Ä–æ–≤–µ–¥—ë—Ç –≤–∞—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É.\n"
    "‚Ä¢ ¬´–û –ø—Ä–æ–µ–∫—Ç–µ¬ª ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º—ã—Å–ª–∞.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã: /start, /menu, /help"
)

FINAL_MESSAGE = (
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ –º–∞—Ä—à—Ä—É—Ç. –ü–∞–º—è—Ç—å –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—è—Ö ‚Äî "
    "–∏–Ω–æ–≥–¥–∞ —Ç–∏—Ö–∏–µ –∑–Ω–∞–∫–∏ —Ä—è–¥–æ–º —Å –Ω–∞–º–∏ –∑–Ω–∞—á–∞—Ç –±–æ–ª—å—à–µ —Å–ª–æ–≤."
)

ASSETS = Path("assets")
MAP_IMAGE = ASSETS / "map.jpg"
MAP_CAPTION = "–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞: 4 —Ç–æ—á–∫–∏ –ø–∞–º—è—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–π ‚Äî –±–æ—Ç –ø—Ä–æ–≤–µ–¥—ë—Ç –≤–∞—Å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º."

# 4 —Ç–æ—á–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤; –ø–æ–ª–æ–∂–∏ —Ñ–æ—Ç–æ –≤ assets/)
POINTS = [
    {
        "title": "–¢–æ—á–∫–∞ 1 ‚Äî –î–æ–º –Ω–∞ ‚Ä¶",
        "text": (
            "–ö—Ä–∞—Ç–∫–∏–π –±–µ—Ä–µ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç (200‚Äì300 —Å–ª–æ–≤): —á—Ç–æ —ç—Ç–æ –∑–∞ –º–µ—Å—Ç–æ, —á—å—è —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è, "
            "–∫–∞–∫–∏–µ –¥–∞—Ç—ã –∏ —Ñ–∞–∫—Ç—ã —Å–≤—è–∑–∞–Ω—ã —Å —Ä–µ–ø—Ä–µ—Å—Å–∏—è–º–∏. –ü–∏—à–∏ —Å–ø–æ–∫–æ–π–Ω–æ –∏ —Ç–æ—á–Ω–æ, –±–µ–∑ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö –∫–ª–∏—à–µ."
        ),
        "photos": [ASSETS / "p1_1.jpg", ASSETS / "p1_2.jpg"],
    },
    {
        "title": "–¢–æ—á–∫–∞ 2 ‚Äî ‚Ä¶",
        "text": (
            "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (200‚Äì300 —Å–ª–æ–≤). –•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ–±–æ–ª—å—à–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–∏—Å—å–º–∞ "
            "‚Äî 1‚Äì2 —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –¥–∞—Ç—å –≥–æ–ª–æ—Å –≤—Ä–µ–º–µ–Ω–∏."
        ),
        "photos": [ASSETS / "p2_1.jpg"],
    },
    {
        "title": "–¢–æ—á–∫–∞ 3 ‚Äî ‚Ä¶",
        "text": (
            "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (200‚Äì300 —Å–ª–æ–≤). –ú–æ–∂–Ω–æ –º—è–≥–∫–æ —Å–æ–æ—Ç–Ω–µ—Å—Ç–∏ –ø—Ä–æ—à–ª–æ–µ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –≤–∏–¥–æ–º –º–µ—Å—Ç–∞."
        ),
        "photos": [ASSETS / "p3_1.jpg"],
    },
    {
        "title": "–¢–æ—á–∫–∞ 4 ‚Äî ‚Ä¶",
        "text": (
            "–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (200‚Äì300 —Å–ª–æ–≤). –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥–≤–µ–¥–∏ –∫ –æ—â—É—â–µ–Ω–∏—é –æ–±—â–µ–π –ø–∞–º—è—Ç–∏ –∏ —É–≤–∞–∂–µ–Ω–∏—è."
        ),
        "photos": [ASSETS / "p4_1.jpg"],
    },
]

# ---- callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ ----
CB_MENU_MAP = "menu_map"
CB_MENU_START = "menu_start"
CB_MENU_ABOUT = "menu_about"

CB_NEXT = "nav_next"
CB_BACK_TO_MAP = "nav_map"
CB_BACK_TO_MENU = "nav_menu"

# ---- –†–∞–∑–º–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ----
def main_menu_inline() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ú–∞—Ä—à—Ä—É—Ç–∞", callback_data=CB_MENU_MAP)],
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≠–∫—Å–∫—É—Ä—Å–∏—é", callback_data=CB_MENU_START)],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data=CB_MENU_ABOUT)],
        ]
    )

def point_nav_inline(is_last: bool) -> InlineKeyboardMarkup:
    first_row_text = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç ‚Üí" if is_last else "–°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ ‚Üí"
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(first_row_text, callback_data=CB_NEXT)],
            [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ", callback_data=CB_BACK_TO_MAP)],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_BACK_TO_MENU)],
        ]
    )

# ---- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----
def _state(context: ContextTypes.DEFAULT_TYPE) -> dict:
    if "idx" not in context.user_data:
        context.user_data["idx"] = 0
    if "visited" not in context.user_data:
        context.user_data["visited"] = set()  # type: ignore
    return context.user_data

# ---- –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã ----
async def send_map(chat, reply_markup=None):
    if MAP_IMAGE.exists():
        with open(MAP_IMAGE, "rb") as f:
            await chat.send_photo(photo=f, caption=MAP_CAPTION, reply_markup=reply_markup or main_menu_inline())
    else:
        await chat.send_message("–ü–û–ö–ê –¢–£–¢ –ù–ò–ß–ï–ì–û –ù–ï–¢ (assets/map.jpg).", reply_markup=reply_markup or main_menu_inline())

# ---- –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—á–∫–∏ ----
async def send_point(update: Update, context: ContextTypes.DEFAULT_TYPE, idx: int):
    if not (0 <= idx < len(POINTS)):
        return
    st = _state(context)
    st["idx"] = idx
    visited: Set[int] = st["visited"]  # type: ignore
    visited.add(idx)

    p = POINTS[idx]
    title = f"*{p['title']}*"
    body = p["text"]
    progress = f"\n\n_–ü—Ä–æ–≥—Ä–µ—Å—Å: {len(visited)}/{len(POINTS)}_"

    # —Ç–µ–∫—Å—Ç —Ç–æ—á–∫–∏
    await update.effective_chat.send_message(
        text=f"{title}\n\n{body}{progress}",
        parse_mode="Markdown",
    )

    # —Ñ–æ—Ç–æ (–¥–æ 2 —à—Ç—É–∫; –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    photos = [ph for ph in p.get("photos", [])[:2] if isinstance(ph, Path) and ph.exists()]
    if photos:
        if len(photos) == 1:
            with open(photos[0], "rb") as f:
                await update.effective_chat.send_photo(photo=f)
        else:
            # media group —Ç—Ä–µ–±—É–µ—Ç –±–∞–π—Ç—ã
            media = []
            for ph in photos:
                with open(ph, "rb") as f:
                    media.append(InputMediaPhoto(media=f.read()))
            await update.effective_chat.send_media_group(media=media)

    is_last = (idx == len(POINTS) - 1)
    await update.effective_chat.send_message(
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É:",
        reply_markup=point_nav_inline(is_last),
    )

# ---- —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ----
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å? –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É, –Ω–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ –ø—Ä–æ–µ–∫—Ç–µ.",
        reply_markup=main_menu_inline(),
    )

async def cmd_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT, reply_markup=main_menu_inline())

# ---- —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ ----
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == CB_MENU_MAP:
        await send_map(q.message.chat, reply_markup=main_menu_inline())

    elif data == CB_MENU_START:
        st = _state(context)
        st["idx"] = 0
        st["visited"] = set()
        await send_point(update, context, 0)

    elif data == CB_MENU_ABOUT:
        await q.message.reply_text(ABOUT_TEXT, reply_markup=main_menu_inline())

    elif data == CB_NEXT:
        st = _state(context)
        idx = int(st.get("idx", 0))
        if idx >= len(POINTS) - 1:
            await q.message.reply_text(FINAL_MESSAGE, reply_markup=main_menu_inline())
        else:
            await send_point(update, context, idx + 1)

    elif data == CB_BACK_TO_MAP:
        await send_map(q.message.chat, reply_markup=main_menu_inline())

    elif data == CB_BACK_TO_MENU:
        await q.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("menu", cmd_menu))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    
    # Webhook –≤–º–µ—Å—Ç–æ polling
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )

if __name__ == "__main__":
    main()
